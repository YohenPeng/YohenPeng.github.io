<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yohen Blog</title>
    <description>iOS开发者，一枚有梦想的奶爸</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 17 Mar 2019 00:50:24 +0800</pubDate>
    <lastBuildDate>Sun, 17 Mar 2019 00:50:24 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>核心动画读书笔记(一)</title>
        <description>&lt;h2 id=&quot;图层树&quot;&gt;图层树&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Core Animation听起来是很容易让人误以为这是个动画框架，类似于Core Image,Core Foundation的内置框架，但是其实动画只是Core Anmiation特性的一部分，更多的是一个复合引擎，它的职责就是尽可能快的组合屏幕上不同的可视内容，分解成独立的图层，存储在一个叫做图层树的体系中，于是这个树形成了UIKit以及iOS应用程序之中你能在屏幕上看见的一切基础。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;uiview--calayer&quot;&gt;UIView &amp;amp; CALayer&lt;/h4&gt;
&lt;p&gt;每一个UIview都有一个CALayer实例的图层属性，也就是所谓的backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。实际上这些UIView背后关联的图层才是真正用来在屏幕上显示和做动画的，UIView只是对它的一个封装。封装的抽象性越高，也就越不灵活，类似于以下功能就没有暴露出来。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;阴影，圆角，带颜色的边框&lt;/li&gt;
  &lt;li&gt;3D 变换&lt;/li&gt;
  &lt;li&gt;非矩形范围&lt;/li&gt;
  &lt;li&gt;透明遮罩&lt;/li&gt;
  &lt;li&gt;多级非线性动画&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以我们有必要去探索Core Animation的一切。&lt;/p&gt;

&lt;p&gt;为什么iOS要基于UIView和CALayer提供两个平行的层级关系呢？为什么不用一个简单的层级来处理所有事情呢？原因在于要做职责分离，这样也能避免很多重复代码&lt;/p&gt;

&lt;h2 id=&quot;寄宿图&quot;&gt;寄宿图&lt;/h2&gt;
&lt;h4 id=&quot;contetns属性&quot;&gt;contetns属性&lt;/h4&gt;
&lt;h6 id=&quot;contents&quot;&gt;contents&lt;/h6&gt;
&lt;p&gt;寄宿图，一般情况下都是用来赋值，将UIImage转换成CGImage，之所以contents类型是id，是因为在Mac OS系统上CGImage和NSIamge类型的值都有效果。&lt;/p&gt;

&lt;p&gt;(那平时我们没有设置寄宿图的Layer，只是设置一些属性类似backgroundColor，在屏幕上渲染之后，我们可以直接访问吗？答案是不可以，对于一个 UIView，如果不提供 bitmap （设置 layer 的 contents 属性），也不实现 drawRect 或者 CALayer drawing 的那几个 draw 函数，那么一个 UIView 的内容会根据这个 UIView 的状态（ backgroundColor，bounds，其实都是 layer 的状态），提交到 render server，并由 render server 调用底层的图形 API 来绘制这个 UIView 的内容，并将最终绘制的 bitmap 结果通过类似 glReadPixels 的 API 从显寸上复制到 CPU 内存里，这部分内存由 CALayer 的内部私有变量来负责持有，这部分数据目前是无法直接获取到的，只能通过 CALayer 的 renderInContext:等 API 间接的取到，这里与 CALayer 的 contents 属性不同，contents 只是用来为一个 CALayer 提供内容的。 
所以一个 UIView 有三种方式来生成内容，分别是 drawRect：，设置 layer 的 contents 属性，设置 UIView 本身或者 layer 的属性，这三种方式最终内存占用是一模一样的，但是消耗的 CPU 和 GPU 资源却不同，第一种需要调用 CPU 绘图 API 来绘制图形，CPU bound ；第二种虽然不需要调用 CPU 来绘图，但是可能会使用 CPU 来解压缩图片文件，所以也是 CPU bound ；第三种 CPU 只负责必要的状态修改，由 GPU 来完成主要的绘图工作，因为 GPU 绘图效率比 CPU 高，所以这种方式应该是效率最高的，整体的性能消耗也最低，GPU bound)&lt;/p&gt;

&lt;h6 id=&quot;contentsgravity&quot;&gt;contentsGravity&lt;/h6&gt;
&lt;p&gt;和UIImageView的contentMode类似，目的是为了决定内容在图层的边界中怎么对齐。其中:
kCAGravityResize等价于UIViewContentModeScaleToFill，
kCAGravityResizeAspect等价于UIViewContentModeScaleAspectFit，
kCAGravityResizeAspectFill等价于UIViewContentModeScaleAspectFill&lt;/p&gt;

&lt;h6 id=&quot;contentsscale&quot;&gt;contentsScale&lt;/h6&gt;
&lt;p&gt;定义了寄宿图的像素尺寸和视图大小的比例(sizeof(image)/sizeof(view))，默认情况下他是一个值为1.0的浮点数 ,将回以每个点1个像素绘制图片，如果设置为2.0，则会以每个点2个像素绘制图片，这就是retina屏幕。一般情况下可如下设置&lt;/p&gt;
&lt;div class=&quot;language-objectivec highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentsScale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScreen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;masktobounds&quot;&gt;maskToBounds&lt;/h6&gt;
&lt;p&gt;在View层有个叫clipsToBounds的属性可以相对应，默认情况下，UIView仍然会绘制超过边界的内容或者子视图，在CALayer下也是这样。如果设置maskToBounds为YES则会修剪超过边界的内容。&lt;/p&gt;

&lt;p&gt;(使用CALayerDelegate绘制寄宿图不支持绘制超过边界的内容，使用CAShapeLayer支持绘制超过边界的内容)&lt;/p&gt;

&lt;h6 id=&quot;contentsrect&quot;&gt;contentsRect&lt;/h6&gt;
&lt;p&gt;这个属性允许我们在图层边框内显示寄宿图的一部分，需要注意的是这里使用单位坐标，0到1之间。比如我们取左上角部分：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIImage *image = [UIImage imageNamed:@&quot;test&quot;];
sublayer.contents = (__bridge id _Nullable)(image.CGImage);
sublayer.contentsRect = CGRectMake(0, 0, 0.5, 0.5);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;contentscenter&quot;&gt;contentsCenter&lt;/h6&gt;
&lt;p&gt;可拉伸图片，这里也是使用单位坐标，0到1之间，和UIImage的resizableImageWithCapInsets类似。&lt;/p&gt;

&lt;h4 id=&quot;custom-drawing&quot;&gt;Custom Drawing&lt;/h4&gt;
&lt;p&gt;如果不需要自定义绘图都能实现需求，那就不要创建这个方法，如果实现了drawRect:方法，系统就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以contentScale的值，这会造成CPU资源和内存的浪费，这也是为什么苹果建议，如果没有自定义绘制的任务就不要在子类中写一个空的drawRect方法。
当一个Layer需要绘制的时候，会请求他的代理给他一个寄宿图来显示&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)displayPayer:(CALayer *)layer;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果代理没有这个方法，CAlayer就会转而尝试调用下面这个方法：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;调用这个方法之前，会创建一个Core Graphics的绘制上下文，作为ctx参数传入。
现在回想UIView实现的drawRect里面获取到的绘制上下文就是这个时候创建的。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)drawRect:(CGRect)rect{
    ...
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;图层几何学&quot;&gt;图层几何学&lt;/h2&gt;
&lt;h4 id=&quot;布局&quot;&gt;布局&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;frame 是相对于父视图的位置坐标，而且bounds对应的是自己内部坐标系;&lt;/li&gt;
  &lt;li&gt;frame 其实是个虚拟属性，根据bounds，center，transform合成而来，并不是独立存在；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;锚点&quot;&gt;锚点&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;anchorPoint 是用来移动图片的把柄，默认位于图层的中心点；&lt;/li&gt;
  &lt;li&gt;View的center/Layer的position 都是anchorPoint相对于父试图的位置；&lt;/li&gt;
  &lt;li&gt;position和anchorPoint修改其中任何一个值，都不会影响另外一个。anchorPoint是position在图层内部的相对位置；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;坐标系&quot;&gt;坐标系&lt;/h4&gt;
&lt;p&gt;zPosition可以用来改变图层的显示顺序，越大就在上面，但不可以改变事件传递的顺序；
坐标系之间转换method：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (CGPoint)convertPoint:(CGPoint)point toView:(nullable UIView *)view;
- (CGPoint)convertPoint:(CGPoint)point fromView:(nullable UIView *)view;
- (CGRect)convertRect:(CGRect)rect toView:(nullable UIView *)view;
- (CGRect)convertRect:(CGRect)rect fromView:(nullable UIView *)view;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;hit-testing&quot;&gt;Hit Testing&lt;/h4&gt;
&lt;p&gt;View和Layer方法都能找到对应的，我们都可以实现下面方法来改变响应者选择的逻辑&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//UIView
- (nullable UIView *)hitTest:(CGPoint)point withEvent:(nullable UIEvent *)event;
- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent *)event;

//Layer
- (nullable CALayer *)hitTest:(CGPoint)p;
- (BOOL)containsPoint:(CGPoint)p;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;自动布局&quot;&gt;自动布局&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;frame绝对布局，代码效率低，性能好&lt;/li&gt;
  &lt;li&gt;autoLayout，代码效率高，随着视图层次增加，性能较差&lt;/li&gt;
  &lt;li&gt;第三方布局库，方案还是挺多的，比如facebook的YogaKit，ComponentKit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;视觉效果&quot;&gt;视觉效果&lt;/h2&gt;
&lt;h4 id=&quot;圆角&quot;&gt;圆角&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;cornerRadius 这个曲率值只影响背景颜色而不影响背景图片或是子图层&lt;/li&gt;
  &lt;li&gt;masksToBounds 设置为YES的话，图层里面的所有东西都会被截取&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;图层边框&quot;&gt;图层边框&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;borderWidth 边框宽度&lt;/li&gt;
  &lt;li&gt;borderColor 边框颜色&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;阴影&quot;&gt;阴影&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;shadowOpacity 不透明度 0.0（不可以见）～1.0（完成不透明）&lt;/li&gt;
  &lt;li&gt;shadowColor   默认是黑色&lt;/li&gt;
  &lt;li&gt;shadowOffset  阴影的方向和距离，默认值是CGSize（0，-3）&lt;/li&gt;
  &lt;li&gt;shadowRadius  阴影的模糊度，越大阴影越模糊，图层看上去就会更明显&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;shadowpath属性&quot;&gt;shadowPath属性&lt;/h6&gt;
&lt;p&gt;我们已经知道图层阴影并不是总是方的，而是从图层内容的形状继承而来。但是实时计算阴影是一个非常消耗资源的，特别是很多子图层，每个图层还有一个有透明效果的寄宿图的时候。如果事先知道阴影的样子，你可以指定一个shadowPath来提高性能&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[myView.layer setShadowPath：[[UIBezierPath bezierPathWithRect：myView.bounds] CGPath];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;图层蒙板&quot;&gt;图层蒙板&lt;/h4&gt;
&lt;p&gt;mask图层定义了父图层的部分可见区域，mask图层的Color属性是无关紧要的，真正重要的是图层的轮廓。
CALayer蒙板图片真正厉害的地方在于不局限于静态图，可以代码实时生成。&lt;/p&gt;

&lt;h4 id=&quot;拉伸过滤&quot;&gt;拉伸过滤&lt;/h4&gt;
&lt;p&gt;当素材的尺寸和图层大小比例刚好1:1是最好的，像素没有被压缩也没有被拉伸，CPU不需要为此额外的计算&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;KCAFilterLinear 双线性滤波算法&lt;/li&gt;
  &lt;li&gt;kCAFilterNearest 没有斜线的小图应该用最近过滤&lt;/li&gt;
  &lt;li&gt;KCAFilterTrilinear  三线性滤波算法，存储了多个大小情况下的图片，也叫多重贴图&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;组透明&quot;&gt;组透明&lt;/h4&gt;
&lt;p&gt;组透明其实用光栅化实现，如果shouldRasterize设置为YES，在应用透明度之前，其子图层都会整合成一个整体的图片，这样就没有透明度混合的问题了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;button.layer.shouldRasterize = YES;
button.layer.rasterizationScale = [UIScreen mainScreen].scale;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;变换&quot;&gt;变换&lt;/h2&gt;
&lt;p&gt;旋转角度使用左手坐标系，拇指为X Y Z方向。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.view.layer.affineTransform = CGAffineTransformMakeScale(2, 2);
self.view.layer.transform = CATransform3DMakeScale(2, 2, 2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3D转换：由于尽管Core Animation图层存在于3D空间之中，但他们并存在同一个3D空间，每个图层的3D场景其实都是扁平化的，当你从正面观察一个图层，看到的实际上由子图层创建的想象出来的3D场景，但当你倾斜这个图层，你会发现实际上这个3D场景仅仅是被绘制在图层的表面。&lt;/p&gt;

&lt;p&gt;固体对象这些日常使用较少，后面再补充。&lt;/p&gt;

&lt;h2 id=&quot;专用图层&quot;&gt;专用图层&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CAShapeLayer 通过矢量绘制图形而不是bitMap绘制的图层子类，直接将数据提交到GPU来处理&lt;/li&gt;
  &lt;li&gt;CATextLayer  其实iOS7之后，使用textLayer和直接使用富文本性能上没傻差别，因为现在UILabel使用的TextKit，其实也是基于CoreText封装的&lt;/li&gt;
  &lt;li&gt;CATransformLayer&lt;/li&gt;
  &lt;li&gt;CAGradientLayer 颜色渐变图层，使用硬件加速&lt;/li&gt;
  &lt;li&gt;CAReplicationLayer 高效生成许多类似的图层&lt;/li&gt;
  &lt;li&gt;CAScrollLayer&lt;/li&gt;
  &lt;li&gt;CATiledLayer  适合处理大图&lt;/li&gt;
  &lt;li&gt;CAEmittedLayer 高性能粒子引擎&lt;/li&gt;
  &lt;li&gt;CAEAGLLyaer  OPENGL图层&lt;/li&gt;
  &lt;li&gt;AVPlayerLayer  播发视频&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;隐式动画&quot;&gt;隐式动画&lt;/h2&gt;
&lt;h4 id=&quot;事务&quot;&gt;事务&lt;/h4&gt;
&lt;p&gt;没有关联View层的Layer，改变CAlayer的一个可做动画的属性，都会有默认动画，持续时间0.25s,次数为1次。这一切都是默认的行为，你不需要做额外的操作。&lt;/p&gt;

&lt;p&gt;即使你没有显示用[CATransaction begin]和[CATransaction commit]开始和提交事务，任何一次在run loop循环中属性的改变都会被集中起来，然后做一次0.25秒的动画。&lt;/p&gt;

&lt;p&gt;其实UIView中的beginAnimation:context:和commitAnimations:context:都是对应上面事务的操作。&lt;/p&gt;

&lt;h4 id=&quot;图层行为&quot;&gt;图层行为&lt;/h4&gt;
&lt;p&gt;对于有关联View的Layer，我们称之为rootLayer，默认把隐式动画都关闭了，下面的流程第一步就返回了nil。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;检查CALayerDelegate的actionForLayer：forKey，有直接调用并返回结果；&lt;/li&gt;
  &lt;li&gt;没有委托或者委托没有实现，则检查自身的actions字典；&lt;/li&gt;
  &lt;li&gt;如果actions字典没有包含对应的属性，那么图层接着在它的style字典中搜索属性名；&lt;/li&gt;
  &lt;li&gt;如果在style也找不到对应的行为，那么图层将会直接调用定义每个属性的标准行为的defaultActionForKey:方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;过渡动画&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CATransition *transition = [CATransition animation];
transition.tyle = kCATransitionPush;
transition.subtyle = KCATransitionFromLeft;
self.colorLayer.actions = @{@&quot;backgroundColor&quot;:transition};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;模型树/呈现树/渲染树，其中渲染树实在SpringBoard进程里面的，我们无法获取。呈现树就是我们屏幕中看到的状态，呈现树和模型树可以相互转换.&lt;/p&gt;

&lt;h2 id=&quot;显示动画&quot;&gt;显示动画&lt;/h2&gt;
&lt;h4 id=&quot;属性动画&quot;&gt;属性动画&lt;/h4&gt;
&lt;p&gt;想在动画完成后，同步更新Layer的属性值，我们可以在animationDidStop:finished:中操作，假如是非rootLayer，我们需要设置一个新的事务，并且禁用图层行为，否则动画会发生两次，一次是之前的显式动画，另一次是因为结束之后的隐式动画。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[CATransaction begin];
[CATransaction setDisableAction:YES];
//更新属性值...
[CATransaction commit];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了在动画结束回调中能区分动画对象，我们可以对animation进行KVC操作&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[baseAnimation setValue:self.animationView forKey:@&quot;handleView&quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h6 id=&quot;关键帧动画&quot;&gt;关键帧动画&lt;/h6&gt;
&lt;p&gt;CAKeyframeAnimation 关键帧动画，除了提供一个数组的值可以按照颜色变化做动画，还有另外一种方式指定动画，就是使用CGPath。path属性可以用一种直观的方式，使用Core Graphics函数定义运行序列来绘制动画。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CAKeyframeAnimation *animation = [CAKeyframeAnimation animation];
animation.keyPath = @&quot;position&quot;;
animation.duration = 4.0;
animation.path = bezierPath.CGPath;
animation.rotationMode = KCAAnimationRotateAuto;
[shipLayer addAnimation:animation forKey:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中设置KCAAnimationRotateAuto能够使图层根据曲线的切线自动旋转。&lt;/p&gt;

&lt;h6 id=&quot;虚拟属性&quot;&gt;虚拟属性&lt;/h6&gt;
&lt;p&gt;对transfrom属性做动画经常使不符合预期的，这是因为变换矩阵不能和其他类似position.x的属性值做单纯的数值加减。&lt;/p&gt;

&lt;p&gt;下面这些使苹果提供给我们做动画使用的keyPath，其中toValue和byValue需要区分，绝对值和相对值。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;transform.rotation.x 围绕x轴翻转 参数：角度 angle2Radian(4)&lt;/li&gt;
  &lt;li&gt;transform.rotation.y 围绕y轴翻转 参数：同上&lt;/li&gt;
  &lt;li&gt;transform.rotation.z 围绕z轴翻转 参数：同上&lt;/li&gt;
  &lt;li&gt;transform.rotation 默认围绕z轴&lt;/li&gt;
  &lt;li&gt;transform.scale.x x方向缩放 参数：缩放比例 1.5&lt;/li&gt;
  &lt;li&gt;transform.scale.y y方向缩放 参数：同上&lt;/li&gt;
  &lt;li&gt;transform.scale.z z方向缩放 参数：同上&lt;/li&gt;
  &lt;li&gt;transform.scale 所有方向缩放 参数：同上&lt;/li&gt;
  &lt;li&gt;transform.translation.x x方向移动 参数：x轴上的坐标 100&lt;/li&gt;
  &lt;li&gt;transform.translation.y x方向移动 参数：y轴上的坐标&lt;/li&gt;
  &lt;li&gt;transform.translation.z x方向移动 参数：z轴上的坐标&lt;/li&gt;
  &lt;li&gt;transform.translation 移动 参数：移动到的点 （100，100）&lt;/li&gt;
  &lt;li&gt;opacity 透明度 参数：透明度 0.5&lt;/li&gt;
  &lt;li&gt;backgroundColor 背景颜色 参数：颜色 (id)[[UIColor redColor] CGColor]&lt;/li&gt;
  &lt;li&gt;cornerRadius 圆角 参数：圆角半径 5&lt;/li&gt;
  &lt;li&gt;borderWidth 边框宽度 参数：边框宽度 5&lt;/li&gt;
  &lt;li&gt;bounds 大小 参数：CGRect&lt;/li&gt;
  &lt;li&gt;contents 内容 参数：CGImage&lt;/li&gt;
  &lt;li&gt;contentsRect 可视内容 参数：CGRect 值是0～1之间的小数&lt;/li&gt;
  &lt;li&gt;hidden 是否隐藏&lt;/li&gt;
  &lt;li&gt;position&lt;/li&gt;
  &lt;li&gt;shadowColor&lt;/li&gt;
  &lt;li&gt;shadowOffset&lt;/li&gt;
  &lt;li&gt;shadowOpacity&lt;/li&gt;
  &lt;li&gt;shadowRadius&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;动画组&quot;&gt;动画组&lt;/h6&gt;
&lt;p&gt;对CAAnimationGroup.animations操作即可。&lt;/p&gt;

&lt;h6 id=&quot;过渡&quot;&gt;过渡&lt;/h6&gt;
&lt;p&gt;属性动画只对图层的可动画属性起作用，所以如果要改变一个不能动画的属性（比如图片），或者从层级关系中添加或者移除图层，属性动画将不起作用，于是有了过渡的概念。过渡并不像属性动画那样平滑地在两个值之间做动画，而是影响到整个图层的变化。过渡动画首先展示之前的图层外观，然后通过一个交换过渡到新的外观。
CATransition的type:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;kCATransitionFade 淡入淡出效果&lt;/li&gt;
  &lt;li&gt;kCATransitonMoveIn 新的图层外观进来&lt;/li&gt;
  &lt;li&gt;kCATransitionPush 2和4的效果叠加&lt;/li&gt;
  &lt;li&gt;kCATransitionReveal 旧的图层外观出去&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;subType:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;kCATransitonFromRight&lt;/li&gt;
  &lt;li&gt;kCATransitonFromLeft&lt;/li&gt;
  &lt;li&gt;kCATransitonFromTop&lt;/li&gt;
  &lt;li&gt;kCATransitonFromBottom&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;和属性动画不同，对指定的图层一次只能使用一次CATransition，因此，无论你对动画的键设置什么值，过渡动画都会对它的键设置为“transition”，也就是常量kCATransition。&lt;/p&gt;

&lt;p&gt;对图层树的动画：
要确保CATransition添加到的图层在过渡动画发生时不会在树状结构中被移除，否则CATransition将会和图层一起被移除，这里可以将动画添加到被影响图层的superLayer。&lt;/p&gt;

&lt;h6 id=&quot;在动画过程中国取消动画&quot;&gt;在动画过程中国取消动画&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)removeAnimationForKey:(NSString*)key;
-(void)removeAllAnimations;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;待续….&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2018/04/06/about-core-animation/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/04/06/about-core-animation/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>自定义TableCell删除效果手势问题解决</title>
        <description>&lt;p&gt;今天尝试给UITableViewCell增加自定义左滑手势，发现ContentView的frame是无法修改的，只能在上面增加一层MyContentView，并加上一个pan手势，当往左开始移动的时候，然后在MyContentView下插入一个UIButton。然后效果出来了，但是，但是发现UITableView上下方向无法滑动了。&lt;/p&gt;

&lt;p&gt;看来是添加在MyContentView的手势和UITableView自带的手势冲突了
看了下代理方法，应该是UITableView的手势被阻止了，可以通过下面的方法return YES来启用。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (BOOL)gestureRecognizer:(UIGestureRecognizer*)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer*)otherGestureRecognizer;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在好了，现在可以上下滑动和左拉滑动了，但是手势会同时响应，这个太bug了，看到网上的做法，可以通过获得手势在某一个方向上的速度来判定：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(BOOL)gestureRecognizerShouldBegin:(UIPanGestureRecognizer *)gestureRecognizer{

    if([gestureRecognizer isKindOfClass:[UIPanGestureRecognizer class]]){
        CGPoint velocityPoint =[gestureRecognizer velocityInView:self.contentView];
        if(fabs(velocityPoint.x)&amp;gt; 100)return YES;
        else return NO;
    }else{
        return NO;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;顺便回顾了iOS的事件传递和 总结下，手势具有优先权。给某个视图加上手势，当有触摸事件发生的时候，视图的touchBegan还是会执行的，如果触摸过程被捕获为手势事件，就不会回到touchMove等方法了，假如不能被识别为手势事件，就跟往常一样会进行各种touch方法的回调。&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/03/15/tablecell-custom-del/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/03/15/tablecell-custom-del/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>iOS 10和低版本下，前后台收到消息处理方案</title>
        <description>&lt;p&gt;由于iOS 9及以下版本，前台收到通知时无法显示在通知栏的。iOS 10 已经开放了前台展示通知栏的API。&lt;/p&gt;

&lt;p&gt;首先我们来看看低版本的如何处理：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo;
-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首先来比较这两个API的异同，虽然前者已经被苹果抛弃了，但是在低版本系统我们还是要适配的，最主要的区别是前者只能在应用跑在前台时才能收到，后者则前后台都可以收到，而且如果设置了后台模式为Remote Notifications的话，还可以执行30s来获取数据。&lt;/p&gt;

&lt;p&gt;假如两者都在Appdelegate里面都实现的话，系统只会调用带completionHandler的后者。
为了前后台通知处理一致，我们实现后者，大致如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler{
     //如果是前台，使用第三方EBForeNotification定制通知栏界面，假如在后台或者未运行，则本来就有
    if ([UIApplication sharedApplication].applicationState == UIApplicationStateActive) {
        [EBForeNotification handleRemoteNotification:userInfo soundID:0 isIos10:NO];
    }
     completionHandler(UIBackgroundFetchResultNoData);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面处理iOS 10的情况：
new API 设置前台收到远程消息时是否显示&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler{
    
    completionHandler(UNNotificationPresentationOptionAlert);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用户点击通知栏，前后台处理方式一致，需要注意的是以前的低版本的API是收到通知就回调，iOS 10以后则是用户点击才回调&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler{
        //do something
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/03/02/notificaiton-handle-before-ios10/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/03/02/notificaiton-handle-before-ios10/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>自动适配多种尺寸占位图（带缓存）</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;UIImage+Placeholder.h&quot;
#import &quot;MyCommon.h&quot;
#define SCLoading @&quot;SCLoading&quot;

static NSMutableDictionary *mutableImageDic;

@implementation UIImage (Placeholder)

+ (UIImage *)loadingImage:(CGSize)size{
    //初始化
    if (!mutableImageDic) {
         mutableImageDic = [NSMutableDictionary new];
        [mutableImageDic setObject:[UIImage imageNamed:SCLoading] forKey:SCLoading];
    }

    if (CGSizeEqualToSize(size, CGSizeZero)) {//如果是自动布局没有size，则三倍面积
        UIImage *img = (UIImage *)[mutableImageDic objectForKey:SCLoading];
        size = CGSizeMake(img.size.width * 3, img.size.height * 3);
    }

    //如果缓存里面，马上返回
    NSString *imageSizeKey = NSStringFromCGSize(size);
    UIImage *cacheImage = [mutableImageDic objectForKey:imageSizeKey];

    if (cacheImage) {
        return cacheImage;
    }

    //没有就绘制
    UIImage *img = [mutableImageDic objectForKey:SCLoading];
    UIGraphicsBeginImageContextWithOptions(size, NO, [UIScreen mainScreen].scale);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, UIColorFromRGB(0xDBDBDB).CGColor);
    CGContextFillRect(context, CGRectMake(0, 0, size.width, size.height));
    if (size.width &amp;lt; img.size.width || size.height &amp;lt; img.size.height) {
        [img drawInRect:CGRectMake(0, 0, size.width, size.height)];
    }else{
        [img drawInRect:CGRectMake((size.width - img.size.width)/2, (size.height - img.size.height)/2, img.size.width, img.size.height)];
    }

    UIImage* retImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    //绘制后添加到到字典内
    [mutableImageDic setObject:retImage forKey:imageSizeKey];
    return retImage;
}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/01/11/adapter-size-placeholder-image/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/01/11/adapter-size-placeholder-image/</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
